/* automatically generated by rust-bindgen 0.69.4 */

pub type ALooper_callbackFunc = ::std::option::Option<
    unsafe extern "C" fn(
        fd: libc::c_int,
        events: libc::c_int,
        data: *mut libc::c_void,
    ) -> libc::c_int,
>;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALooper {
    _unused: [u8; 0],
}

pub const ALOOPER_PREPARE_ALLOW_NON_CALLBACKS: u32 =
    ALooperPrepare::ALOOPER_PREPARE_ALLOW_NON_CALLBACKS as u32;
pub const ALOOPER_POLL_WAKE: i32 = PollType::ALOOPER_POLL_WAKE as i32;
pub const ALOOPER_POLL_CALLBACK: i32 = PollType::ALOOPER_POLL_CALLBACK as i32;
pub const ALOOPER_POLL_TIMEOUT: i32 = PollType::ALOOPER_POLL_TIMEOUT as i32;
pub const ALOOPER_POLL_ERROR: i32 = PollType::ALOOPER_POLL_ERROR as i32;
pub const ALOOPER_EVENT_INPUT: u32 = EventType::ALOOPER_EVENT_INPUT as u32;
pub const ALOOPER_EVENT_OUTPUT: u32 = EventType::ALOOPER_EVENT_OUTPUT as u32;
pub const ALOOPER_EVENT_ERROR: u32 = EventType::ALOOPER_EVENT_ERROR as u32;
pub const ALOOPER_EVENT_HANGUP: u32 = EventType::ALOOPER_EVENT_HANGUP as u32;
pub const ALOOPER_EVENT_INVALID: u32 = EventType::ALOOPER_EVENT_INVALID as u32;
pub const ALOOPER_ID_MAIN: u32 = ALooperId::ALOOPER_ID_MAIN as u32;
pub const ALOOPER_ID_INPUT: u32 = ALooperId::ALOOPER_ID_INPUT as u32;
pub const ALOOPER_ID_USER: u32 = ALooperId::ALOOPER_ID_USER as u32;

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ALooperPrepare {
    ALOOPER_PREPARE_ALLOW_NON_CALLBACKS = 1,
}

#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PollType {
    ALOOPER_POLL_WAKE = -1,
    ALOOPER_POLL_CALLBACK = -2,
    ALOOPER_POLL_TIMEOUT = -3,
    ALOOPER_POLL_ERROR = -4,
}

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EventType {
    ALOOPER_EVENT_INPUT = 1,
    ALOOPER_EVENT_OUTPUT = 2,
    ALOOPER_EVENT_ERROR = 4,
    ALOOPER_EVENT_HANGUP = 8,
    ALOOPER_EVENT_INVALID = 16,
}

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ALooperId {
    ALOOPER_ID_MAIN = 1,
    ALOOPER_ID_INPUT = 2,
    ALOOPER_ID_USER = 3,
}

extern "C" {
    pub fn ALooper_forThread() -> *mut ALooper;

    pub fn ALooper_prepare(opts: libc::c_int) -> *mut ALooper;

    pub fn ALooper_acquire(looper: *mut ALooper);

    pub fn ALooper_release(looper: *mut ALooper);

    pub fn ALooper_pollOnce(
        timeoutMillis: libc::c_int,
        outFd: *mut libc::c_int,
        outEvents: *mut libc::c_int,
        outData: *mut *mut libc::c_void,
    ) -> libc::c_int;

    pub fn ALooper_pollAll(
        timeoutMillis: libc::c_int,
        outFd: *mut libc::c_int,
        outEvents: *mut libc::c_int,
        outData: *mut *mut libc::c_void,
    ) -> libc::c_int;

    pub fn ALooper_wake(looper: *mut ALooper);

    pub fn ALooper_addFd(
        looper: *mut ALooper,
        fd: libc::c_int,
        ident: libc::c_int,
        events: libc::c_int,
        callback: ALooper_callbackFunc,
        data: *mut libc::c_void,
    ) -> libc::c_int;

    pub fn ALooper_removeFd(looper: *mut ALooper, fd: libc::c_int) -> libc::c_int;
}
